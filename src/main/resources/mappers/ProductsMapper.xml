<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductsMapper">
    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="productsMap" type="study.spring.springmyshop.model.Products">
        <!-- 일련번호, IS NOT NULL, PRI -->
        <result property="id" column="id" />
        <!-- 상품명, IS NOT NULL -->
        <result property="name" column="name" />
        <!-- 간략설명, IS NOT NULL -->
        <result property="description" column="description" />
        <!-- 상품가격, IS NOT NULL -->
        <result property="price" column="price" />
        <!-- 할인가(할인없을 경우 0), IS NOT NULL -->
        <result property="salePrice" column="sale_price" />
        <!-- 옵션(json=ProductOptions,list=True), IS NOT NULL -->
        <result property="productOptionJson" column="product_option" />
        <!-- 노출여부(Y/N), IS NOT NULL -->
        <result property="isOpen" column="is_open" />
        <!-- 신상품(Y/N), IS NOT NULL -->
        <result property="isNew" column="is_new" />
        <!-- 베스트(Y/N), IS NOT NULL -->
        <result property="isBest" column="is_best" />
        <!-- 추천상품(Y/N), IS NOT NULL -->
        <result property="isVote" column="is_vote" />
        <!-- 상품 URL(크롤링한 원본 사이트), IS NOT NULL -->
        <result property="url" column="url" />
        <!-- 상품설명, IS NOT NULL -->
        <result property="content" column="content" />
        <!-- 리스트 이미지{json=UploadItem}, IS NOT NULL -->
        <result property="listImgJson" column="list_img" />
        <!-- 상품 타이틀 이미지{json=UploadItem}, IS NOT NULL -->
        <result property="titleImgJson" column="title_img" />
        <!-- 등록일시, IS NOT NULL -->
        <result property="regDate" column="reg_date" />
        <!-- 변경일시, IS NOT NULL -->
        <result property="editDate" column="edit_date" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" parameterType="study.spring.springmyshop.model.Products" resultMap="productsMap">
        SELECT id, name, description, price, sale_price, product_option, is_open, is_new, is_best, is_vote, url, content, list_img, title_img, reg_date, edit_date FROM products WHERE id=#{id}
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList" parameterType="study.spring.springmyshop.model.Products" resultMap="productsMap">
        SELECT id, name, description, price, sale_price, product_option, is_open, is_new, is_best, is_vote, url, content, list_img, title_img, reg_date, edit_date FROM products 
        
        <where>
            <if test="isOpen != null">
                AND is_open=#{isOpen}
            </if>
            <if test="isBest != null">
                AND is_best=#{isBest}
            </if>
            <if test="isNew != null">
                AND is_new=#{isNew}
            </if>
            <if test="isVote != null">
                AND is_vote=#{isVote}
            </if>
            
            <if test="name != null">
                AND name LIKE concat('%', #{name}, '%')
            </if>
        </where> 
        
        ORDER BY id DESC
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>

    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll" parameterType="study.spring.springmyshop.model.Products" resultType="int">
        SELECT COUNT(*) FROM products
        
        <where>
            <if test="isOpen != null">
                AND is_open=#{isOpen}
            </if>
            <if test="isBest != null">
                AND is_best=#{isBest}
            </if>
            <if test="isNew != null">
                AND is_new=#{isNew}
            </if>
            <if test="isVote != null">
                AND is_vote=#{isVote}
            </if>
            
            <if test="name != null">
                AND name LIKE concat('%', #{name}, '%')
            </if>
        </where> 
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem" parameterType="study.spring.springmyshop.model.Products" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (
            name, description, price, sale_price, product_option, is_open, is_new, is_best, is_vote, url, content, list_img, title_img, reg_date, edit_date
        ) VALUES (
            #{name}, #{description}, #{price}, #{salePrice}, #{productOptionJson}, #{isOpen}, #{isNew}, #{isBest}, #{isVote}, #{url}, #{content}, #{listImgJson}, #{titleImgJson}, now(), now()
        )
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" parameterType="study.spring.springmyshop.model.Products">
        DELETE FROM products WHERE id=#{id}
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem" parameterType="study.spring.springmyshop.model.Products">
        UPDATE products SET 
            name=#{name},
            description=#{description},
            price=#{price},
            sale_price=#{salePrice},
            product_option=#{productOptionJson},
            is_open=#{isOpen},
            is_new=#{isNew},
            is_best=#{isBest},
            is_vote=#{isVote},
            url=#{url},
            content=#{content},
            list_img=#{listImgJson},
            title_img=#{titleImgJson},
            edit_date=now()
        WHERE id=#{id}
    </update>

</mapper>
